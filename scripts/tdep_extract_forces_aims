#! /usr/bin/env python

from argparse import ArgumentParser as argpars

parser = argpars(description='Read forces from aims output and store them in TDEP infile')
parser.add_argument('files', type=str, nargs='+', help='aims output files')
args = parser.parse_args()

forces = []

for fil in args.files:
    print('  file being processed: {:s}'.format(fil))
    with open(fil, 'r') as f:
        lines = f.readlines()
    for ii in range(len(lines)):
        ll = lines[ii]
        # Find the number of atoms:
        if '| Number of atoms                   :' in ll:
            n_atoms = int(ll.split()[5])

        if not 'Total atomic forces (unitary forces cleaned) [eV/Ang]:' in ll:
            continue
        else:
            for ll in lines[ii+1:]:
                if ll.strip() == '':
                    break
                forces.append([float(ss.strip()) for ss in ll.split()[2:5]])
        break

n_scells = int(len(forces) / n_atoms)
print('\n  number of atoms in supercell:   {:d}'.format(n_atoms))
print('  number of supercells processed: {:d}'.format(n_scells))

with open('infile.forces', 'w') as f:
    for force in forces:
        f.write('{:23.15E} {:23.15E} {:23.15E}\n'.format(*tuple(force)))

with open('infile.meta', 'w') as f:
        f.write(f'{n_atoms}     # N atoms\n')
        f.write(f'{n_scells}    # N timesteps\n')
        f.write(f'{1.0}         # timestep in fs (currently not used norimplemented)\n')
        f.write(f'{30000}       # temperature in K (currently not used nor bimplemented)\n')
with open('infile.stat', 'w') as f:
    for ii in range(n_atoms * len(forces)):
        f.write('0 0 0 0 0 0 0 0 0 0 0 0 0\n')

print('  infile.forces written.')
print('  Mock data written to infile.meta and infile.stat.\n')
