#! /usr/bin/env python3.6

import numpy as np
from matplotlib import pyplot as plt
from scipy      import stats
import sys, os
from argparse import ArgumentParser as argpars

parser = argpars(description='Extrapolate kappa at a temperature')
parser.add_argument('file', type=str, help='File with #qpoints, thermal_cond')
parser.add_argument('-p', '--plot', action='store_true', help='plot or not')
parser.add_argument('-o', type=str, default=None)
args = parser.parse_args()

# Read data and post process
#
with open(args.file, 'r') as f:
    lines = [ll.strip() for ll in f.readlines() if (ll.strip() and not ll.strip().startswith('#'))]
#
data = []
for ll in lines:
    data.append(ll.split())
#
data = np.array(data, dtype = float)

# fit linear 1/q
qs = data[:, 0]
kappa_tensor = data[:, 1:]
# Trace
ks = 1/3 * kappa_tensor[:, :3].sum(axis=1)

# Fit Trace
slope, y0, rval, pval, sterr = stats.linregress([1/qs, ks])

# Fit tensor:
slope_xx, k_xx, rval_xx, pval_xx, sterr_xx = stats.linregress([1/qs, kappa_tensor[:, 0]])
slope_yy, k_yy, rval_yy, pval_yy, sterr_yy = stats.linregress([1/qs, kappa_tensor[:, 1]])
slope_zz, k_zz, rval_zz, pval_zz, sterr_zz = stats.linregress([1/qs, kappa_tensor[:, 2]])
slope_xy, k_xy, rval_xy, pval_xy, sterr_xy = stats.linregress([1/qs, kappa_tensor[:, 3]])
slope_xz, k_xz, rval_xz, pval_xz, sterr_xz = stats.linregress([1/qs, kappa_tensor[:, 4]])
slope_yz, k_yz, rval_yz, pval_yz, sterr_yz = stats.linregress([1/qs, kappa_tensor[:, 5]])


print(f'Extrapolated values:')
print(f'  1/3 * Tr(kappa) = {y0:7.2f} +/- {sterr:7.2f} W/mK')
print(f'             k_xx = {k_xx:7.2f} +/- {sterr_xx:7.2f} W/mK')
print(f'             k_yy = {k_yy:7.2f} +/- {sterr_yy:7.2f} W/mK')
print(f'             k_zz = {k_zz:7.2f} +/- {sterr_zz:7.2f} W/mK')
print(f'             k_xy = {k_xy:7.2f} +/- {sterr_xy:7.2f} W/mK')
print(f'             k_xz = {k_xz:7.2f} +/- {sterr_xz:7.2f} W/mK')
print(f'             k_yz = {k_yz:7.2f} +/- {sterr_yz:7.2f} W/mK')

# Plot
if args.plot:
    fig, ax = plt.subplots(1)
    ax.plot(1/data[:, 0], ks[:], '*')
    for ii in range(len(data[:, 0])):
        ax.annotate(f'{data[ii,0]:2.0f}', xy=(1/data[ii,0], ks[ii]),
                    xytext=(1/data[ii,0], 1.01*ks[ii]))
    xx = np.arange(0, .25, .01)
    ax.plot(xx, y0 + xx*slope)
    ax.set_xlim([0, .20])
    ax.legend(['Calculated data', 'Linear fit: $\kappa_{\infty}$ = ' + f'{y0:5.4}'])
    ax.set_xlabel('Inverse number of q-points')
    ax.set_ylabel(r'$\kappa$  [ W/mK ]')
    ax.set_title('q-point extrapolation')
    jj = 0
    if args.o:
        pname = args.o
    else:
        pname = f'{args.file.rstrip(".dat")}.png'
        while os.path.exists(pname):
            jj += 1
            pname = f'{args.file.rstrip(".dat")}.{jj:d}.png'
    plt.savefig(pname)

